#Configuration file for the simulation indicating which network will be simulated, the sim duration etc
[General]

network = org.cl.simulations.NodeNetwork
sim-time-limit = 60s
**.display-name = 
**.display-string = 

# Configuration for the result recording
result-dir = ../results
**.statistic-recording = true
**.result-recording-modes = all
check-signals = false
record-eventlog = true
warmup-period = 1s

NodeNetwork.number_of_nodes=1
NodeNetwork.number_of_queues=3
**.number_of_ports=1 #numero di porte del nodo
**.controller.number_of_ports=1 #numero di porte del controller (deve essere uguale a number_of_ports)

#*.node[0].controller.attr=value per settare valori per specifici nodi nel vettore di noti ned della rete
*.node[*].controller.reward_term_models={
    pkt_drop_penalty: {
        weight: (1/3) / num_queues,
        signal: expr(-(priority + 1) * pkt_drop_count),
    },
    queue_occ_penalty: {
        weight: (1/3) / num_queues,
        signal: expr(-(priority + 1) * queue_occ),
    },
    energy_penalty: {
        weight: (1/3) / 2,
        signal: expr(-energy_consumed * cost_per_mWh)
    }
    }

*.node[*].agent.implementation=${i='{"agent_type": "random"}', '{"agent_type": "dqn", "epsilon_greedy": 0.1}'}

# distribution is expected to return a continous value between 0 and 1
# TODO: maybe an uniform is not the best choice. If the charger depends on
# the environment, we expect a value that do not change so much in short time,
# instead it should show a trend.
*.node[*].controller.battery_charge_rate_distribution=truncnormal(1/2, 1/2)
*.node[*].controller.illegal_action_penalty_factor=1e0
*.node[*].controller.charge_battery_timeout_delta=0.5s
*.node[*].controller.ask_action_timeout_delta=0.1s
*.node[*].controller.data_buffer_capacity=3
*.node[*].controller.max_neighbours=10
*.node[*].controller.link_cap=1Mbps
*.node[*].controller.power_models={
    # https://fcc.report/FCC-ID/2AQ7Q-DB50475/5101472.pdf
    intel_dualband_wireless_AC_7256: {
        tx_mW: 32mW,
        idle_mW: 7mW
        }
    }
*.node[*].controller.power_source_models={
        # https://www.belkin.com/support-article/?articleNum=335925
        belkin_BPB001_powerbank: {
            cap_mWh: 50000mWh,
            cost_per_mWh: 0
        },
        power_chord_standard: {
            cap_mWh: inf,
            cost_per_mWh: 10
        },
        solar_panel: {
            cap_mWh: 10000mWh, # intended as charge output in best conditions
            cost_per_mWh: 0
        }
    }
*.node[*].num_queues=parent.number_of_queues
*.node[*].queues[*].capacity=2
# queue priority is given by its position in the node queue array
*.node[*].queues[*].priority=ancestorIndex(0)

#srcNode parameters
*.srcNode[*].srcController.avg_arrival_rate=1
*.srcNode[*].srcController.send_interval=exponential(avg_arrival_rate)
*.srcNode[*].srcController.pkt_size=uniform(32, 512)

#rng parameters
num-rngs = 5 #number of RNG streams, should be equal to the 2*number of queues+number of nodes

#First number_of_queues=number_of_src_nodes generators are reserved for send_interval 
*.srcNode[0..parent.num_queues-1].srcController.send_interval.rng-0.seed = string(index()) 
*.srcNode[0..parent.num_queues-1].srcController.send_interval.rng-0 = string(index())

#After that there are also number_of_queues=number_of_src_nodes generators reserved for pkt_size
*.srcNode[0..parent.num_queues-1].srcController.pkt_size.rng-0.seed = string(index()+NodeNetwork.number_of_queues)

#Last there are number_of_nodes generators reserved for the battery_charge_rate_distribution 
*.srcNode[0..parent.num_queues-1].srcController.pkt_size.rng-0 = string(index()+NodeNetwork.number_of_queues)
*.node[0..parent.number_of_nodes-1].controller.battery_charge_rate_distribution.rng-0.seed = string(2*NodeNetwork.number_of_queues+index())

#For example indexing with 2 queues and 1 node works as follows:
# Generators should be assigned as 
#[send_interval_1, send_interval_2, pkt_size_1, pkt_size_2, battery_charge_rate_distribution]
# in send_interval we use only index() to access position 0 and 2 of RNG vector
# in pkt_size we use index()+2 to access position 3 (0+2) and 4 (1+2) of RNG vector
# in battery_charge_rate_distribution we use 4+index() to access position 5 of RNG vector
# index has different values depending of where it is used, eg for srcNode it goes from 0 to 1, for node from 0 to 0